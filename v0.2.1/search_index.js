var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LegendSpecFits]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#LegendSpecFits.LegendSpecFits","page":"API","title":"LegendSpecFits.LegendSpecFits","text":"LegendSpecFits\n\nTemplate for Julia packages.\n\n\n\n\n\n","category":"module"},{"location":"api/#LegendSpecFits.aoe_compton_background_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.aoe_compton_background_peakshape","text":"aoe_compton_background_peakshape(\n    x::Real, μ::Real, σ::Real,\n    background::Real, δ::Real\n)\n\nDescribes the background shape of a typical A/E Compton peak in a detector as a step like background for MSE events.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_peakshape-NTuple{6, Real}","page":"API","title":"LegendSpecFits.aoe_compton_peakshape","text":"aoe_compton_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    background::Real, δ::Real\n)\n\nDescribes the shape of a typical A/E Compton peak in a detector as a gaussian SSE peak and a step like background for MSE events.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_signal_peakshape-NTuple{4, Real}","page":"API","title":"LegendSpecFits.aoe_compton_signal_peakshape","text":"aoe_compton_signal_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real\n)\n\nDescribes the signal shape of a typical A/E Compton peak in a detector as a gaussian SSE peak.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.array_to_tuple-Tuple{AbstractArray, NamedTuple}","page":"API","title":"LegendSpecFits.array_to_tuple","text":"array_to_tuple(a::AbstractArray, as_nt::NamedTuple)\n\nReturn a NamedTuple with the values of a in the order given by fieldnames(as_nt).\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.autocal_energy-Tuple{AbstractArray{<:Real}}","page":"API","title":"LegendSpecFits.autocal_energy","text":"autocal_energy(E_raw::AbstractArray{<:Real})\n\nCompute an energy calibration from raw reconstructed energy deposition values.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.background_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.background_peakshape","text":"background_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real, skew_width::Real,\n)\n\nDescribes the background part of the shape of a typical gamma peak in a detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.calibrate_energy!-Union{Tuple{T}, Tuple{Array{T}, PropDicts.PropDict}} where T<:Real","page":"API","title":"LegendSpecFits.calibrate_energy!","text":"calibrate_energy!(e::AbstractArray{<:Real}, pars::PropDict)\n\nCalibrate energy values in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.correct_aoe!-Union{Tuple{T}, Tuple{Array{T}, Array{T}, NamedTuple{(:e, :μ, :f_μ_scs, :μ_scs_slope, :μ_scs_intercept, :σ, :σ_scs, :f_σ_scs)}}} where T<:Real","page":"API","title":"LegendSpecFits.correct_aoe!","text":"correctAoE!(aoe::Array{T}, e::Array{T}, aoe_corrections::NamedTuple{(:e, :μ, :f_μ_scs, :μ_scs_slope, :μ_scs_intercept, :σ, :σ_scs, :f_σ_scs)}) where T<:Real\n\nCorrect the AoE values in the aoe array using the corrections in aoe_corrections.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ctc_energy-Union{Tuple{T}, Tuple{Array{T}, Array{T}, T, T}} where T<:Real","page":"API","title":"LegendSpecFits.ctc_energy","text":"ctc_energy(e::Array{T}, qdrift::Array{T}, peak::T, window::T) where T<:Real\n\nCorrect for the drift time dependence of the energy by minimizing the ratio of the FWHM and the peak height of the peak around peak in e with a cut window of window. The drift time dependence is given by qdrift.\n\nReturns\n\n* `peak`: peak position\n* `window`: window size\n* `fct`: correction factor\n* `bin_width`: optimal bin width\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.cut_single_peak-Union{Tuple{T}, Tuple{Vector{T}, T, T}, Tuple{Vector{T}, T, T, Int64}, Tuple{Vector{T}, T, T, Int64, Float64}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.cut_single_peak","text":"cut_single_peak(x::Array, min_x::Float64, max_x::Float64, n_bins::Int=15000, relative_cut::Float64=0.5)\n\nCut out a single peak from the array x between min_x and max_x. The number of bins is the number of bins to use for the histogram. The relative cut is the fraction of the maximum counts to use for the cut.\n\nReturns\n\n* `max`: maximum position of the peak\n* `low`: lower edge of the cut peak\n* `high`: upper edge of the cut peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_combined_peak_stats-Tuple{StructArrays.StructArray}","page":"API","title":"LegendSpecFits.estimate_combined_peak_stats","text":"estimate_combined_peak_stats(peakstats::StructArray,; calib_type::Symbol=:th228)\n\nEstimate the peak position, FWHM, sigma, counts and background of a peak from a histogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_fwhm-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.estimate_fwhm","text":"estimate_fwhm(v::NamedTuple, v_err::NamedTuple)\n\nGet the FWHM of a peak from the fit parameters.\n\nReturns\n\n* `fwhm`: the FWHM of the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_single_peak_stats-Tuple{StatsBase.Histogram}","page":"API","title":"LegendSpecFits.estimate_single_peak_stats","text":"estimate_single_peak_stats(h::Histogram, calib_type::Symbol=:th228)\n\nEstimate statistics/parameters for a single peak in the given histogram h.\n\nh must only contain a single peak. The peak should have a Gaussian-like shape. calib_type specifies the calibration type. Currently only :th228 is implemented. If you want get the peak statistics for a PSD calibration, use :psd.\n\nReturns\n\nNamedTuple with the fields     * peak_pos: estimated position of the peak (in the middle of the peak)     * peak_fwhm: full width at half maximum (FWHM) of the peak     * peak_sigma: estimated standard deviation of the peak     * peak_counts: estimated number of counts in the peak     * mean_background: estimated mean background value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_single_peak_stats_psd-Union{Tuple{StatsBase.Histogram{T}}, Tuple{T}} where T<:Real","page":"API","title":"LegendSpecFits.estimate_single_peak_stats_psd","text":"estimate_single_peak_stats_psd(h::Histogram{T}) where T<:Real\n\nEstimate peak parameters for a single peak in a histogram using the maximum, the FWHM and the area of the peak.\n\nReturns\n\n* `peak_pos`: Position of the peak\n* `peak_fwhm`: Full width at half maximum of the peak\n* `peak_sigma`: Standard deviation of the peak\n* `peak_counts`: Counts of the peak\n* `mean_background`: Mean background of the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ex_gauss_pdf-NTuple{4, Real}","page":"API","title":"LegendSpecFits.ex_gauss_pdf","text":"ex_gauss_pdf(x::Real, μ::Real, σ::Real, θ::Real)\n\nThe PDF of an Exponentially modified Gaussian distribution with Gaussian parameters μ, σ and exponential scale θ at x.\n\nIt is the PDF of the distribution that descibes the random process rand(Normal(μ, σ)) + rand(Exponential(θ)).\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ex_step_gauss-NTuple{5, Real}","page":"API","title":"LegendSpecFits.ex_step_gauss","text":"ex_step_gauss(x::Real, l::Real, k::Real, t::Real, d::Real)\n\nEvaluates an extended step gauss model at x with parameters l, k, t and d.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.expand_vars-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.expand_vars","text":"expand_vars(v::NamedTuple)::StructArray\n\nExpand all fields in v (scalars or arrays) to same array size and return a StructArray.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.exponential_decay-NTuple{4, Real}","page":"API","title":"LegendSpecFits.exponential_decay","text":"exponential_decay(x::Real, amplitude::Real, decay::Real, offset::Real)\n\nEvaluates an exponential decay function at x with parameters amplitude, decay and offset.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.f_optimize_ctc-NTuple{4, Any}","page":"API","title":"LegendSpecFits.f_optimize_ctc","text":"f_optimize_ctc(fct, e, qdrift, bin_width)\n\nCalculate the ratio of the FWHM and the peak height of the peak around peak in e with a cut window of window. The drift time dependence is given by e_ctc = e + fct * qdrift.\n\nReturns\n\n* `fwhm / p_height`: FWHM of the peak divided by peak height\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_aoe_compton-Union{Tuple{T}, Tuple{Array, StructArrays.StructArray, Array{T}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_aoe_compton","text":"fit_aoe_compton(peakhists::Array, peakstats::StructArray, compton_bands::Array{T}) where T<:Real\n\nFit the A/E Compton bands using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: Dict of NamedTuples of the fit results containing values and errors for each compton band\n* `report`: Dict of NamedTuples of the fit report which can be plotted for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_aoe_corrections-Union{Tuple{T}, Tuple{Array{<:Real}, Array{T}, Array{T}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_aoe_corrections","text":"fit_aoe_corrections(e::Array{<:Real}, μ::Array{T}, σ::Array{T}) where T<:Real\n\nFit the corrections for the AoE value of the detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_calibration-Tuple{Array, Array}","page":"API","title":"LegendSpecFits.fit_calibration","text":"fitCalibration\n\nFit the calibration lines to a linear function.\n\nReturns\n\n* `slope`: the slope of the linear fit\n* `intercept`: the intercept of the linear fit\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_enc_sigmas-Union{Tuple{T}, Tuple{Matrix{T}, StepRangeLen{Unitful.Quantity{<:T}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Int64}, T, T, Int64, T}} where T<:Real","page":"API","title":"LegendSpecFits.fit_enc_sigmas","text":"fit_enc_sigmas(enc_grid::Matrix{T}, enc_grid_rt::StepRangeLen{Quantity{<:T}, Base.TwicePrecision{Quantity{<:T}}, Base.TwicePrecision{Quantity{<:T}}, Int64}, min_enc::T, max_enc::T, nbins::Int64, rel_cut_fit::T) where T<:Real\n\nFit the ENC values in enc_grid for each RT in enc_grid_rt with a Gaussian and return the optimal RT and the corresponding ENC value.\n\nArguments\n\nenc_grid: 2D array of ENC values for each RT in enc_grid_rt\nenc_grid_rt: 1D array of RT values for which the ENC values in enc_grid are calculated\nmin_enc: minimum ENC value to consider for the fit\nmax_enc: maximum ENC value to consider for the fit\nnbins: number of bins to use for the histogram of ENC values\nrel_cut_fit: relative cut value to use for the fit\n\nReturns\n\nrt: optimal RT value\nmin_enc: corresponding ENC value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_fwhm-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_fwhm","text":"fitFWHM(fit_fwhm(peaks::Vector{T}, fwhm::Vector{T}) where T<:Real\n\nFit the FWHM of the peaks to a quadratic function.\n\nReturns\n\n* `qbb`: the FWHM at 2039 keV\n* `err`: the uncertainties of the fit parameters\n* `v`: the fit result parameters\n* `f_fit`: the fitted function\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_fwhm_ft_fep-Union{Tuple{T}, Tuple{Matrix, StepRangeLen{Unitful.Quantity{<:T}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Int64}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_fwhm_ft_fep","text":"fit_fwhm_ft_fep(e_grid::Matrix{T}, e_grid_ft::StepRangeLen{Quantity{<:T}, Base.TwicePrecision{Quantity{<:T}}, Base.TwicePrecision{Quantity{<:T}}, Int64}) where T <:Real\n\nFit the FWHM values in e_grid for each FT in e_grid_ft with a Gamma Peakshape and return the optimal FT and the corresponding FWHM value.\n\nArguments\n\ne_grid: 2D array of energy values for each FT in e_grid_ft\ne_grid_ft: 1D array of FT values for which the FWHM values in e_grid are calculated\n\nReturns\n\nft: optimal FT value\nmin_fwhm: corresponding FWHM value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_half_centered_trunc_gauss-Union{Tuple{T}, Tuple{Vector{T}, T, NamedTuple{(:low, :high, :max), Tuple{T, T, T}}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_half_centered_trunc_gauss","text":"fit_half_centered_trunc_gauss(x::Array, cuts::NamedTuple{(:low, :high, :max), Tuple{Float64, Float64, Float64}})\n\nFit a single truncated Gaussian to the data x between cut.low and cut.high. The peak center is fixed at μ and the peak is cut in half either in the left or right half.\n\nReturns report and result` with:\n\n* `f_fit`: fitted function\n* `μ`: mean of the Gaussian\n* `μ_err`: error of the mean\n* `σ`: standard deviation of the Gaussian\n* `σ_err`: error of the standard deviation\n* `n`: number of counts in the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_peaks-Tuple{Array, StructArrays.StructArray, Array}","page":"API","title":"LegendSpecFits.fit_peaks","text":"fitPeaks\n\nPerform a fit of the peakshape to the data in peakhists using the initial values in peakstats to the calibration lines in th228_lines.\n\nReturns\n\n* `peak_fit_plots`: array of plots of the peak fits\n* `return_vals`: dictionary of the fit results\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_peaks_combined-Tuple{Array, StructArrays.StructArray, Array}","page":"API","title":"LegendSpecFits.fit_peaks_combined","text":"fit_peaks_combined(peakhists::Array, peakstats::StructArray, th228_lines::Array{T},; calib_type::Symbol=:th228, uncertainty::Bool=true, fixed_position::Bool=false) where T<:Real\n\nFit the peaks of a histogram to a combined peakshape function while sharring parameters between peaks.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_aoe_compton-Union{Tuple{T}, Tuple{StatsBase.Histogram, NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background), NTuple{5, T}}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_single_aoe_compton","text":"fit_single_aoe_compton(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background, :μ, :σ), NTuple{7, T}}; uncertainty::Bool=true) where T<:Real\n\nPerform a fit of the peakshape to the data in h using the initial values in ps while using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_peak_th228-Union{Tuple{T}, Tuple{StatsBase.Histogram, NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background), NTuple{5, T}}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_single_peak_th228","text":"fit_single_peak_th228(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background), NTuple{5, T}};, uncertainty::Bool=true, fixed_position::Bool=false) where T<:Real\n\nPerform a fit of the peakshape to the data in h using the initial values in ps while using the gamma_peakshape with low-E tail. Also, FWHM is calculated from the fitted peakshape with MC error propagation.  The peak position can be fixed to the value in ps by setting fixed_position=true.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_trunc_gauss-Union{Tuple{T}, Tuple{Vector{T}, NamedTuple{(:low, :high, :max), Tuple{T, T, T}}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_single_trunc_gauss","text":"fit_single_trunc_gauss(x::Array, cuts::NamedTuple{(:low, :high, :max), Tuple{Float64, Float64, Float64}})\n\nFit a single truncated Gaussian to the data x between min_x and max_x. Returns report and resultwith:     *ffit: fitted function     *μ: mean of the Gaussian     *μerr: error of the mean     *σ: standard deviation of the Gaussian     *σ_err: error of the standard deviation     *n`: number of counts in the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.gamma_peakshape-NTuple{8, Real}","page":"API","title":"LegendSpecFits.gamma_peakshape","text":"gamma_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    step_amplitude::Real, skew_fraction::Real, skew_width::Real,\n    background::Real\n)\n\nDescribes the shape of a typical gamma peak in a detector with a flat background.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.gauss_pdf-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.gauss_pdf","text":"LegendSpecFits.gauss_pdf(x::Real, μ::Real, σ::Real)\n\nEquivalent to pdf(Normal(μ, σ), x)\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.generate_aoe_compton_bands-Union{Tuple{T}, Tuple{Array{<:Real}, Array{<:Real}, Array{<:Real}, T}} where T<:Real","page":"API","title":"LegendSpecFits.generate_aoe_compton_bands","text":"generate_aoe_compton_bands(aoe::Array{<:Real}, e::Array{<:Real}, compton_bands::Array{<:Real}, compton_window::T) where T<:Real\n\nGenerate histograms for the A/E Compton bands and estimate peak parameters.  The compton bands are cutted out of the A/E spectrum and then binned using the Freedman-Diaconis Rule. For better performance the binning is only done in the area around the peak. The peak parameters are estimated using the estimate_single_peak_stats_psd function.\n\nReturns\n\n* `peakhists`: Array of histograms for each compton band\n* `peakstats`: StructArray of peak parameters for each compton band\n* `min_aoe`: Array of minimum A/E values for each compton band\n* `max_aoe`: Array of maximum A/E values for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_continuum_surrival_fraction-Union{Tuple{T}, Tuple{Array{T}, Array{T}, T, T, T}} where T<:Real","page":"API","title":"LegendSpecFits.get_continuum_surrival_fraction","text":"get_continuum_surrival_fraction(aoe::Array{T}, e::Array{T}, center::T, window::T, psd_cut::T,; uncertainty=true) where T<:Real\n\nGet the surrival fraction of a continuum after a PSD cut value psd_cut for a given center and window size.\n\nReturns\n\ncenter: Center of the continuum\nwindow: Window size\nn_before: Number of counts before the cut\nn_after: Number of counts after the cut\nsf: Surrival fraction\nerr: Uncertainties\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_dep_peakhists-Union{Tuple{T}, Tuple{Array{T}, Array{T}}} where T<:Real","page":"API","title":"LegendSpecFits.get_dep_peakhists","text":"get_aoe_peakhists(aoe::Array{T}, e::Array{T}) where T<:Real\n\nGet the histograms of the DEP in the AoE spectrum.\n\nReturns\n\nhist: Histogram of the DEP peak\nstats: Stats of the DEP peak\ndep: Position of the DEP peak\nwindow: Window size around the DEP peak\ne: Energy values in the window around the DEP peak\naoe: AoE values in the window around the DEP peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_distribution_transform","page":"API","title":"LegendSpecFits.get_distribution_transform","text":"get_distribution_transform(d::Distribution, pprior::Prior)\n\nReturn a DistributionTransform for the given Distribution and Prior.\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.get_mc_value_shapes-Tuple{NamedTuple, NamedTuple, Int64}","page":"API","title":"LegendSpecFits.get_mc_value_shapes","text":"get_mc_value_shapes(v::NamedTuple, v_err::NamedTuple, n::Int64)\n\nReturn a NamedTuple with the same fields as v and v_err but with Normal distributions for each field.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_n_after_psd_cut-Union{Tuple{T}, Tuple{T, Array{T}, Array{T}, T, T}} where T<:Real","page":"API","title":"LegendSpecFits.get_n_after_psd_cut","text":"get_n_after_psd_cut(psd_cut::T, aoe::Array{T}, e::Array{T}, peak::T, window::T,; uncertainty=true) where T<:Real\n\nGet the number of counts after a cut value psd_cut for a given peak and window size whiile performing a peak fit with fixed position.\n\n# Returns\n\nn: Number of counts after the cut\nn_err: Uncertainty of the number of counts after the cut\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_peak_fwhm_th228","page":"API","title":"LegendSpecFits.get_peak_fwhm_th228","text":"get_peak_fwhm_th228(v_ml::NamedTuple, v_ml_err::NamedTuple)\n\nGet the FWHM of a peak from the fit parameters while performing a MC error propagation.\n\nReturns\n\n* `fwhm`: the FWHM of the peak\n* `fwhm_err`: the uncertainty of the FWHM of the peak\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.get_peak_surrival_fraction-Union{Tuple{T}, Tuple{Array{T}, Array{T}, T, T, T}} where T<:Real","page":"API","title":"LegendSpecFits.get_peak_surrival_fraction","text":"get_peak_surrival_fraction(aoe::Array{T}, e::Array{T}, peak::T, window::T, psd_cut::T,; uncertainty=true) where T<:Real\n\nGet the surrival fraction of a peak after a PSD cut value psd_cut for a given peak and window size whiile performing a peak fit with fixed position.\n\nReturns\n\npeak: Peak position\nn_before: Number of counts before the cut\nn_after: Number of counts after the cut\nsf: Surrival fraction\nerr: Uncertainties\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_peaks_surrival_fractions-Union{Tuple{T}, Tuple{Array{T}, Array{T}, Array{T}, Array{Symbol}, Array{T}, T}} where T<:Real","page":"API","title":"LegendSpecFits.get_peaks_surrival_fractions","text":"get_peaks_surrival_fractions(aoe::Array{T}, e::Array{T}, peaks::Array{T}, peak_names::Array{Symbol}, windows::Array{T}, psd_cut::T,; uncertainty=true) where T<:Real\n\nGet the surrival fraction of a peak after a PSD cut value psd_cut for a given peak and window size while performing a peak fit with fixed position.\n\nReturn\n\nresult: Dict of results for each peak\nreport: Dict of reports for each peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_psd_cut-Union{Tuple{T}, Tuple{Array{T}, Array{T}}} where T<:Real","page":"API","title":"LegendSpecFits.get_psd_cut","text":"get_psd_cut(aoe::Array{T}, e::Array{T},; dep_sf::Float64=0.9) where T<:Real\n\nGet the PSD cut value for a given DEP surrival fraction dep_sf (Default: 90%). The cut value is determined by finding the cut value where the number of counts after the cut is dep_sf of the number of counts before the cut. The algorithm is based on a root search function and expecting a Bisection.\n\nReturns\n\ncut: PSD cut value\nn0: Number of counts before the cut\nn90: Number of counts after the cut\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.hist_loglike-Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}}","page":"API","title":"LegendSpecFits.hist_loglike","text":"hist_loglike(f_fit::Base.Callable, h::Histogram{<:Real,1})\n\nCalculate the Poisson log-likelihood of a fit function f_fit(x) and a histogram h. f_fit must accept all values x on the horizontal axis of the histogram.\n\nCurrently uses a simple midpoint-rule integration of f_fit over the bins of h.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.linear_function-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.linear_function","text":"linear_function(x::Real, slope::Real, intercept::Real)\n\nEvaluates a linear function at x with parameters slope and intercept.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.lowEtail_peakshape-NTuple{6, Real}","page":"API","title":"LegendSpecFits.lowEtail_peakshape","text":"lowEtail_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real, skew_width::Real,\n)\n\nDescribes the low-E signal tail part of the shape of a typical gamma peak in a detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.signal_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.signal_peakshape","text":"signal_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real, skew_width::Real,\n)\n\nDescribes the signal part of the shape of a typical gamma peak in a detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.simple_calibration-Union{Tuple{T}, Tuple{AbstractArray{<:Real}, Array{T}, Array{T}}} where T<:Real","page":"API","title":"LegendSpecFits.simple_calibration","text":"simple_calibration(e_uncal::Array, th228_lines::Array, window_size::Float64=25.0, n_bins::Int=15000, calib_type::String=\"th228\")\n\nPerform a simple calibration for the uncalibrated energy array e_uncal  using the calibration type calib_type and the calibration lines th228_lines.  The window size is the size of the window around the calibration line to use for the calibration.  The number of bins is the number of bins to use for the histogram.\n\nReturns      * h_calsimple: histogram of the calibrated energy array     * h_uncal: histogram of the uncalibrated energy array     * c: calibration factor     * fep_guess: estimated full energy peak (FEP)     * peakhists: array of histograms around the calibration lines     * peakstats: array of statistics for the calibration line fits\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.step_gauss-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.step_gauss","text":"step_gauss(x::Real, μ::Real, σ::Real)\n\nEvaluates the convulution of a Heaviside step function and the PDF of Normal(μ, σ) at x.\n\nThe result does not correspond to a PDF as it is not normalizable.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.subhist-Tuple{StatsBase.Histogram{<:Any, 1}, Tuple{Real, Real}}","page":"API","title":"LegendSpecFits.subhist","text":"subhist(h::Histogram, r::Tuple{<:Real,<:Real})\n\nReturn a new Histogram with the bins in the range r.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.tuple_to_array-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.tuple_to_array","text":"tuple_to_array(nt::NamedTuple, fields::Vector{Symbol})\n\nReturn an array with the values of the fields in nt in the order given by fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.weibull_from_mx","page":"API","title":"LegendSpecFits.weibull_from_mx","text":"weibull_from_mx(m::Real, x::Real, p_x::Real = 0.6827)::Weibull\n\nConstruct a Weibull distribution with a given median m and a given p_x-quantile x.\n\nUseful to construct priors for positive quantities.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#LegendSpecFits.jl","page":"Home","title":"LegendSpecFits.jl","text":"","category":"section"}]
}
