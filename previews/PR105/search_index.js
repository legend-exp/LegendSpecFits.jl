var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LegendSpecFits]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#LegendSpecFits.LegendSpecFits","page":"API","title":"LegendSpecFits.LegendSpecFits","text":"LegendSpecFits\n\nTemplate for Julia packages.\n\n\n\n\n\n","category":"module"},{"location":"api/#LegendSpecFits.LQ_cut-Tuple{Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {T, U}, Vector{<:Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {T, U}}, Vector{<:AbstractFloat}}","page":"API","title":"LegendSpecFits.LQ_cut","text":"DEP_µ::Unitful.Energy, DEP_σ::Unitful.Energy, e_cal::Vector{<:Unitful.Energy}, lq_classifier::Vector{Float64}; cut_sigma::Float64=3.0, truncation_sigma::Float64=2.0)\n\nEvaluates the cutoff value for the LQ cut. The function performs a binned gaussian fit on the sidebandsubtracted LQ histogram and evaluates the cutoff value difined at 3σ of the fit.\n\nReturns\n\n* `result`: NamedTuple of the cutoff value\n* `report`: NamedTuple of the fit result, fit report and temporary histograms\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits._fit_fwhm_ft-Union{Tuple{T}, Tuple{Matrix, StepRangeLen, Union{Real, Unitful.AbstractQuantity{<:Real}}, T, T, T}} where T<:Real","page":"API","title":"LegendSpecFits._fit_fwhm_ft","text":"_fit_fwhm_ft(e_grid::Matrix, e_grid_ft::StepRangeLen{Quantity{<:T}, Base.TwicePrecision{Quantity{<:T}}, Base.TwicePrecision{Quantity{<:T}}, Int64}, rt::Unitful.RealOrRealQuantity, min_e::T, max_e::T, nbins::Int64, rel_cut_fit::T; default_ft::Quantity{T}=3.0u\"µs\", ft_fwhm_tol::Unitful.Energy{<:Real} = 0.1u\"keV\") where {T <:Real}\n\nFit the FWHM values in e_grid for each FT in e_grid_ft with a Gamma Peakshape and return the optimal FT and the corresponding FWHM value. The cut values cut for each flat-top time a window for better histogramming.\n\nArguments\n\ne_grid: 2D array of energy values for each FT in e_grid_ft\ne_grid_ft: 1D array of FT values for which the FWHM values in e_grid are calculated\nrt: RT value for which the FWHM values in e_grid are calculated\nmin_e: minimum energy value to consider for the fit\nmax_e: maximum energy value to consider for the fit\nnbins: number of bins to use for the histogram of energy values\nrel_cut_fit: relative cut value to use for the fit\nft_fwhm_tol: search for lowest \"optimal\" ft within minimum(fwhm) + ft_fwhm_tol to avoid artificially large ft \n\nReturns\n\nft: optimal FT value\nmin_fwhm: corresponding FWHM value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits._fit_fwhm_ft_ctc-Union{Tuple{T}, Tuple{Matrix, StepRangeLen, Vector{<:Real}, Union{Real, Unitful.AbstractQuantity{<:Real}}, T, T, T}} where T<:Real","page":"API","title":"LegendSpecFits._fit_fwhm_ft_ctc","text":"_fit_fwhm_ft_ctc(e_grid::Matrix, e_grid_ft::StepRangeLen, qdrift::Vector{<:Real}, rt::Unitful.RealOrRealQuantity, min_e::T, max_e::T, nbins::Int64, rel_cut_fit::T; default_ft::Quantity{T}=3.0u\"µs\", peak::Unitful.Energy{<:Real}=2614.5u\"keV\", window::Tuple{<:Unitful.Energy{<:Real}, <:Unitful.Energy{<:Real}}=(35.0u\"keV\", 25.0u\"keV\"), ft_fwhm_tol::Unitful.Energy{<:Real} = 0.1u\"keV\") where {T <:Real}\n\nFit the FWHM values in e_grid for each FT in e_grid_ft with a Gamma Peakshape and return the optimal FT and the corresponding FWHM value. The cut values cut for each flat-top time a window for better histogramming.\n\nArguments\n\ne_grid: 2D array of energy values for each FT in e_grid_ft\ne_grid_ft: 1D array of FT values for which the FWHM values in e_grid are calculated\nqdrift: drift time values for each energy value in e_grid\nrt: RT value for which the FWHM values in e_grid are calculated\nmin_e: minimum energy value to consider for the fit\nmax_e: maximum energy value to consider for the fit\nnbins: number of bins to use for the histogram of energy values\nrel_cut_fit: relative cut value to use for the fit\nft_fwhm_tol: search for lowest \"optimal\" ft within minimum(fwhm) + ft_fwhm_tol to avoid artificially large ft \n\nReturns\n\nft: optimal FT value\nmin_fwhm: corresponding FWHM value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits._get_model_counts-Tuple{Union{Function, Type}, Union{NamedTuple, AbstractVector}, Union{StepRangeLen, Vector{<:Real}}, Union{StepRangeLen, Vector{<:Real}}}","page":"API","title":"LegendSpecFits._get_model_counts","text":"_get_model_counts(f_fit::Base.Callable,v_ml::Union{NamedTuple, AbstractVector},bin_centers::StepRangeLen,bin_widths::StepRangeLen)\n\naux. function to get modelled peakshape based on  histogram binning and best-fit parameter\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits._prepare_data-Tuple{StatsBase.Histogram{<:Real, 1}}","page":"API","title":"LegendSpecFits._prepare_data","text":"_prepare_data(h::Histogram{<:Real,1})\n\naux. function to convert histogram data into bin edges, bin width and bin counts\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.advanced_time_and_memory_control-Tuple{}","page":"API","title":"LegendSpecFits.advanced_time_and_memory_control","text":"advanced_time_and_memory_control(x::Optim.OptimizationState, start_time::Float64, time_to_setup::Float64; time_limit::Float64=60.0, mem_limit::Float64=30.0)\n\nControl function to stop optimization based on time and memory usage.\n\nArguments\n\nx::Optim.OptimizationState: optimization state\nstart_time::Float64: start time\ntime_to_setup::Float64: time to setup\ntime_limit::Float64: time limit\nmem_limit::Float64: memory limit\n\nReturn\n\nBool: true if optimization should stop\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_background_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.aoe_compton_background_peakshape","text":"aoe_compton_background_peakshape(\n    x::Real, μ::Real, σ::Real,\n    background::Real, δ::Real\n)\n\nDescribes the background shape of a typical A/E Compton peak in a detector as a step like background for MSE events.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_peakshape-NTuple{6, Real}","page":"API","title":"LegendSpecFits.aoe_compton_peakshape","text":"aoe_compton_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    background::Real, δ::Real\n)\n\nDescribes the shape of a typical A/E Compton peak in a detector as a gaussian SSE peak and a step like background for MSE events.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_peakshape_components-Tuple{Symbol}","page":"API","title":"LegendSpecFits.aoe_compton_peakshape_components","text":"aoe_compton_peakshape_components(fit_func::Symbol; background_center::Real)\n\nThis function defines the components (signal, low/high-energy tail, backgrounds) of the fit function used in gamma specfits.  These component functions are used in the fit-report and in plot receipes \n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.aoe_compton_signal_peakshape-NTuple{4, Real}","page":"API","title":"LegendSpecFits.aoe_compton_signal_peakshape","text":"aoe_compton_signal_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real\n)\n\nDescribes the signal shape of a typical A/E Compton peak in a detector as a gaussian SSE peak.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.array_to_tuple-Tuple{AbstractArray, NamedTuple}","page":"API","title":"LegendSpecFits.array_to_tuple","text":"array_to_tuple(a::AbstractArray, as_nt::NamedTuple)\n\nReturn a NamedTuple with the values of a in the order given by fieldnames(as_nt).\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.autocal_energy-Tuple{AbstractArray{<:Real}, Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}}","page":"API","title":"LegendSpecFits.autocal_energy","text":"autocal_energy(e::AbstractArray{<:Real}, photon_lines::Vector{<:Unitful.RealOrRealQuantity}; min_e::Real=100, max_e_binning_quantile::Real=0.5, σ::Real = 2.0, threshold::Real = 50.0, min_n_peaks::Int = length(photon_lines), max_n_peaks::Int = 4 * length(photon_lines), α::Real = 0.01, rtol::Real = 5e-3)\n\nCompute an energy calibration from raw reconstructed energy deposition values based on a given number of known photon lines which are contained in the spectrum\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.background_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.background_peakshape","text":"background_peakshape(\nx::Real, μ::Real, σ::Real, \nstep_amplitude::Real, background::Real; \nbackground_slope::Real = 0.0, background_exp = 0.0, background_center::Real = µ\n\n)\n\nDescribes the background part of the shape of a typical gamma peak in a detector:  components: \n\nstep-function scaled with step_amplitude`\nenergy-independent background: background`\nlinear slope: background_slope (optional)\nexponential decay:  background_exp (optional)\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.baseline_qc-Union{Tuple{Q}, Tuple{Q, PropDicts.PropDict}} where Q<:TypedTables.Table","page":"API","title":"LegendSpecFits.baseline_qc","text":"baseline_qc(data, qc_config)\n\nPerform simple Gaussian fits on the baseline disitrbutions for a given data set.\n\nReturns\n\nresult: Namedtuple containing the cut and fit results for each baseline variable\nreport: Namedtuple containing plotable objects.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.chi2fit-Tuple{Function, AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"API","title":"LegendSpecFits.chi2fit","text":"fit_chisq(x::AbstractVector{<:Real},y::AbstractVector{<:Real},yerr::AbstractVector{<:Real}, f_fit::Function;pull_t::Vector{<:NamedTuple} = fill(NamedTuple(), first(methods(f_fit)).nargs - 2), v_init::Vector = [])\n\nLeast square fit with chi2 minimization\n\nInput:\n\nx : x-values\ny : y-values\nyerr : 1 sigma uncertainty on y\nffit : fit/model function. e.g. for a linear function: flin(x,p1,p2)  = p1 .* x .+ p2   \n\nThe numer of fit parameter is determined with first(methods(f_fit)).nargs - 2. That's why it's important that ffit has the synthax f(x,arg1,arg2,arg3,...) pullt : pull term, a vector of NamedTuple with fields mean and std. A Gaussian pull term is added to the chi2 function to account for systematic uncertainties. If left blank, no pull term is used. v_init : initial value for fit parameter optimization. If left blank, the initial value is set to 1 or guessed roughly for all fit parameters\n\nReturn:\n\nresult : NamedTuple with the optimized fit parameter and the fit function\nreport: \n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ctc_energy","page":"API","title":"LegendSpecFits.ctc_energy","text":"ctc_energy(e::Array{T}, qdrift::Array{T}, peak::T, window::T) where T<:Real\n\nCorrect for the drift time dependence of the energy by minimizing the ratio of the FWHM and the peak height of the peak around peak in e with a cut window of window. The drift time dependence is given by qdrift.\n\nReturns\n\n* `peak`: peak position\n* `window`: window size\n* `fct`: correction factor\n* `fwhm_before`: FWHM before correction\n* `fwhm_after`: FWHM after correction\n* `func`: function to correct energy\n* `func_generic`: generic function to correct energy\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.cut_single_peak-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, T, T}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.cut_single_peak","text":"cut_single_peak(x::Array, min_x::Float64, max_x::Float64,; n_bins::Int=-1, relative_cut::Float64=0.5)\n\nCut out a single peak from the array x between min_x and max_x. The number of bins is the number of bins to use for the histogram. The relative cut is the fraction of the maximum counts to use for the cut.\n\nReturns\n\n* `max`: maximum position of the peak\n* `low`: lower edge of the cut peak\n* `high`: upper edge of the cut peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.double_gaussian-NTuple{7, Real}","page":"API","title":"LegendSpecFits.double_gaussian","text":"double_gaussian(\n    x::Real, μ1::Real, σ1::Real, n1::Real, \n    μ2::Real, σ2::Real, n2::Real\n)\n\nEvaluates the sum of two gaussians at x with parameters μ1, σ1, n1, μ2, σ2, n2.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_combined_peak_stats-Tuple{StructArrays.StructArray}","page":"API","title":"LegendSpecFits.estimate_combined_peak_stats","text":"estimate_combined_peak_stats(peakstats::StructArray,; calib_type::Symbol=:th228)\n\nEstimate the peak position, FWHM, sigma, counts and background of a peak from a histogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_fwhm-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.estimate_fwhm","text":"estimate_fwhm(v::NamedTuple, v_err::NamedTuple)\n\nGet the FWHM of a peak from the fit parameters.\n\nReturns\n\n* `fwhm`: the FWHM of the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.estimate_single_peak_stats-Tuple","page":"API","title":"LegendSpecFits.estimate_single_peak_stats","text":"estimate_single_peak_stats(h::Histogram, calib_type::Symbol=:th228)\n\nEstimate statistics/parameters for a single peak in the given histogram h.\n\nh must only contain a single peak. The peak should have a Gaussian-like shape. calib_type specifies the calibration type. Currently :th228, :psd and :simple is implemented..\n\nReturns\n\nNamedTuple with the fields     * peak_pos: estimated position of the peak (in the middle of the peak)     * peak_fwhm: full width at half maximum (FWHM) of the peak     * peak_sigma: estimated standard deviation of the peak     * peak_counts: estimated number of counts in the peak     * mean_background: estimated mean background value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ex_gauss_pdf-NTuple{4, Real}","page":"API","title":"LegendSpecFits.ex_gauss_pdf","text":"ex_gauss_pdf(x::Real, μ::Real, σ::Real, θ::Real)\n\nThe PDF of an Exponentially modified Gaussian distribution with Gaussian parameters μ, σ and exponential scale θ at x.\n\nIt is the PDF of the distribution that descibes the random process rand(Normal(μ, σ)) + rand(Exponential(θ)).\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.ex_step_gauss-NTuple{5, Real}","page":"API","title":"LegendSpecFits.ex_step_gauss","text":"ex_step_gauss(x::Real, l::Real, k::Real, t::Real, d::Real)\n\nEvaluates an extended step gauss model at x with parameters l, k, t and d.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.expand_vars-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.expand_vars","text":"expand_vars(v::NamedTuple)::StructArray\n\nExpand all fields in v (scalars or arrays) to same array size and return a StructArray.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.exponential_decay-NTuple{4, Real}","page":"API","title":"LegendSpecFits.exponential_decay","text":"exponential_decay(x::Real, amplitude::Real, decay::Real, offset::Real)\n\nEvaluates an exponential decay function at x with parameters amplitude, decay and offset.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_aoe_compton-Union{Tuple{T}, Tuple{Vector{<:StatsBase.Histogram}, StructArrays.StructArray, Array{T}}} where T<:(Union{Unitful.Quantity{var\"#s414\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s414\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s414\"<:Real, U})","page":"API","title":"LegendSpecFits.fit_aoe_compton","text":"fit_aoe_compton(peakhists::Array, peakstats::StructArray, compton_bands::Array{T}) where T<:Real\n\nFit the A/E Compton bands using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: Dict of NamedTuples of the fit results containing values and errors for each compton band\n* `report`: Dict of NamedTuples of the fit report which can be plotted for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_aoe_compton_combined-Union{Tuple{T}, Tuple{Vector{<:StatsBase.Histogram}, StructArrays.StructArray, Array{T}, NamedTuple}} where T<:(Union{Unitful.Quantity{var\"#s389\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s389\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s389\"<:Real, U})","page":"API","title":"LegendSpecFits.fit_aoe_compton_combined","text":"fit_aoe_compton_combined(peakhists::Vector{<:Histogram}, peakstats::StructArray, compton_bands::Array{T}, result_corrections::NamedTuple; pars_aoe::NamedTuple{(:μ, :μ_err, :σ, :σ_err)}=NamedTuple{(:μ, :μ_err, :σ, :σ_err)}(nothing, nothing, nothing, nothing), uncertainty::Bool=false) where T<:Unitful.Energy{<:Real}\n\nPerformed a combined fit over all A/E Compton band using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events, assuming f_aoe_mu for μ and f_aoe_sigma for σ.\n\nReturns\n\n* `v_ml`: The fit result from the maximum-likelihood fit.\n* `report_μ`: Report to plot the combined fit result for the enery-dependence of `μ`.\n* `report_σ`: Report to plot the combined fit result for the enery-dependence of `σ`.\n* `report_bands`: Dict of NamedTuples of the fit report which can be plotted for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_aoe_corrections-Tuple{Array{<:Union{Unitful.Quantity{var\"#s392\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s392\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s392\"<:Real, U}}, Array{<:Real}, Array{<:Real}}","page":"API","title":"LegendSpecFits.fit_aoe_corrections","text":"fitaoecorrections(e::Array{<:Unitful.Energy{<:Real}}, μ::Array{<:Real}, σ::Array{<:Real})\n\nFit the corrections for the AoE value of the detector.\n\nReturns\n\ne: Energy values\nμ: Mean values\nσ: Sigma values\nμ_scs: Fit result for the mean values\nf_μ_scs: Fit function for the mean values\nσ_scs: Fit result for the sigma values\nf_σ_scs: Fit function for the sigma values\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_binned_double_gauss-Tuple{StatsBase.Histogram, NamedTuple}","page":"API","title":"LegendSpecFits.fit_binned_double_gauss","text":"fit_binned_double_gauss(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background, :μ, :σ), NTuple{7, T}}; uncertainty::Bool=true) where T<:Real\n\nPerform a binned fit of the peakshape to the data in h using the initial values in ps while using the f_double_gauss function consisting of a double gaussian peak. The priors for the first gaussian peak are given by the ps tuple. For the priors of the second gaussian peak a wide window around the first peak is used.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_binned_trunc_gauss-Union{Tuple{StatsBase.Histogram}, Tuple{T}, Tuple{StatsBase.Histogram, @NamedTuple{low::T, high::T, max::T}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_binned_trunc_gauss","text":"fit_binned_trunc_gauss(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background, :μ, :σ), NTuple{7, T}}; uncertainty::Bool=true) where T<:Real\n\nPerform a binned fit of the peakshape to the data in h using the initial values in ps while using the f_gauss function consisting of a gaussian peak multiplied with an amplitude n.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_calibration-Tuple{Int64, AbstractVector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, AbstractVector{<:Unitful.Quantity}}","page":"API","title":"LegendSpecFits.fit_calibration","text":"fit_calibration(pol_order::Int, µ::AbstractVector{<:Union{Real,Measurement{<:Real}}}, peaks::AbstractVector{<:Union{Real,Measurement{<:Real}}}; pull_t::Vector{<:NamedTuple}=fill(NamedTuple(), pol_order+1), v_init::Vector = [], uncertainty::Bool=true )\n\nFit the calibration lines with polynomial function of polorder order     polorder == 1 -> linear function     pol_order == 2 -> quadratic function\n\nReturns\n\n* `result`: NamedTuple with the following fields\n    * `par`: best-fit parameters\n    * `gof`: godness of fit\n* `report`:\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_enc_sigmas-Union{Tuple{T}, Tuple{Matrix{T}, StepRangeLen{Unitful.Quantity{<:T}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Base.TwicePrecision{Unitful.Quantity{<:T}}, Int64}, T, T, Int64, T}} where T<:Real","page":"API","title":"LegendSpecFits.fit_enc_sigmas","text":"fit_enc_sigmas(enc_grid::Matrix{T}, enc_grid_rt::StepRangeLen{Quantity{<:T}, Base.TwicePrecision{Quantity{<:T}}, Base.TwicePrecision{Quantity{<:T}}, Int64}, min_enc::T, max_enc::T, nbins::Int64, rel_cut_fit::T) where T<:Real\n\nFit the ENC values in enc_grid for each RT in enc_grid_rt with a Gaussian and return the optimal RT and the corresponding ENC value.\n\nArguments\n\nenc_grid: 2D array of ENC values for each RT in enc_grid_rt\nenc_grid_rt: 1D array of RT values for which the ENC values in enc_grid are calculated\nmin_enc: minimum ENC value to consider for the fit\nmax_enc: maximum ENC value to consider for the fit\nnbins: number of bins to use for the histogram of ENC values\nrel_cut_fit: relative cut value to use for the fit\n\nReturns\n\nrt: optimal RT value\nmin_enc: corresponding ENC value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_fwhm","page":"API","title":"LegendSpecFits.fit_fwhm","text":"fitFWHM(fit_fwhm(peaks::Vector{T}, fwhm::Vector{T}) where T<:Real\n\nFit the FWHM of the peaks to a quadratic function.\n\nReturns\n\n* `qbb`: the FWHM at 2039 keV\n* `err`: the uncertainties of the fit parameters\n* `v`: the fit result parameters\n* `f_fit`: the fitted function\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.fit_fwhm_ft-Union{Tuple{T}, Tuple{Matrix, StepRangeLen, Vector{<:Real}, Union{Real, Unitful.AbstractQuantity{<:Real}}, T, T, T}, Tuple{Matrix, StepRangeLen, Vector{<:Real}, Union{Real, Unitful.AbstractQuantity{<:Real}}, T, T, T, Bool}} where T<:Real","page":"API","title":"LegendSpecFits.fit_fwhm_ft","text":"fit_fwhm_ft(e_grid::Matrix, e_grid_ft::StepRangeLen, rt::Unitful.RealOrRealQuantity, min_e::T, max_e::T, rel_cut_fit::T, apply_ctc::Bool=true; kwargs...)\nfit_fwhm_ft(e_grid::Matrix, e_grid_ft::StepRangeLen, rt::Unitful.RealOrRealQuantity, min_e, max_e, rel_cut_fit; kwargs...)\nfit_fwhm_ft(e_grid::Matrix, e_grid_ft::StepRangeLen, qdrift::Vector{<:Real}, rt::Unitful.RealOrRealQuantity, min_e, max_e, rel_cut_fit; kwargs...)\n\nFit the FWHM values in e_grid for each FT in e_grid_ft with a Gamma Peakshape and return the optimal FT and the corresponding FWHM value. The cut values cut for each flat-top time a window for better histogramming. If the apply_ctc flag is set to true, the CTC correction is applied to the energy values.  Othwise, if a qdrift vector is provided, the CTC correction is applied to the energy values.\n\nArguments\n\ne_grid: 2D array of energy values for each FT in e_grid_ft\ne_grid_ft: 1D array of FT values for which the FWHM values in e_grid are calculated\nrt: RT value for which the FWHM values in e_grid are calculated\nmin_e: minimum energy value to consider for the fit\nmax_e: maximum energy value to consider for the fit\nrel_cut_fit: relative cut value to use for the fit\n\nReturns\n\nft: optimal FT value\nmin_fwhm: corresponding FWHM value\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_half_centered_trunc_gauss-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, T, @NamedTuple{low::T, high::T, max::T}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_half_centered_trunc_gauss","text":"fit_half_centered_trunc_gauss(x::Array, cuts::NamedTuple{(:low, :high, :max), Tuple{Float64, Float64, Float64}})\n\nFit a single truncated Gaussian to the data x between cut.low and cut.high. The peak center is fixed at μ and the peak is cut in half either in the left or right half.\n\nReturns report and result` with:\n\n* `f_fit`: fitted function\n* `μ`: mean of the Gaussian\n* `σ`: standard deviation of the Gaussian\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_half_trunc_gauss-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, @NamedTuple{low::T, high::T, max::T}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_half_trunc_gauss","text":"fit_half_trunc_gauss(x::Array, cuts::NamedTuple{(:low, :high, :max), Tuple{Float64, Float64, Float64}})\n\nFit a single truncated Gaussian to the data x between cut.low and cut.high. The peak center is fixed at μ and the peak is cut in half either in the left or right half.\n\nReturns report and result with:\n\n* `f_fit`: fitted function\n* `μ`: mean of the Gaussian\n* `σ`: standard deviation of the Gaussian\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_lq_compton-Union{Tuple{T}, Tuple{Vector{<:StatsBase.Histogram}, StructArrays.StructArray, Array{T}}} where T<:(Union{Unitful.Quantity{var\"#s4235\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s4235\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s4235\"<:Real, U})","page":"API","title":"LegendSpecFits.fit_lq_compton","text":"fit_lq_compton(peakhists::Array, peakstats::StructArray, compton_bands::Array{T}) where T<:Real\n\nFit the A/E Compton bands using the f_lq_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: Dict of NamedTuples of the fit results containing values and errors for each compton band\n* `report`: Dict of NamedTuples of the fit report which can be plotted for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_peaks-Tuple{Array, StructArrays.StructArray, Vector}","page":"API","title":"LegendSpecFits.fit_peaks","text":"fit_peaks(peakhists::Array, peakstats::StructArray, th228_lines::Array,; calib_type::Symbol=:th228, uncertainty::Bool=true, low_e_tail::Bool=true)\n\nPerform a fit of the peakshape to the data in peakhists using the initial values in peakstats to the calibration lines in th228_lines. \n\nReturns\n\n* `peak_fit_plots`: array of plots of the peak fits\n* `return_vals`: dictionary of the fit results\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_peaks_combined-Tuple{Array, StructArrays.StructArray, Array}","page":"API","title":"LegendSpecFits.fit_peaks_combined","text":"fit_peaks_combined(peakhists::Array, peakstats::StructArray, th228_lines::Array{T},; calib_type::Symbol=:th228, uncertainty::Bool=true, fixed_position::Bool=false) where T<:Real\n\nFit the peaks of a histogram to a combined peakshape function while sharring parameters between peaks.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_sf_wl-Union{Tuple{T}, Tuple{Vector{<:Real}, ArraysOfArrays.ArrayOfSimilarArrays{var\"#s4213\", M, N, L, P} where {var\"#s4213\"<:Real, M, N, L, P<:AbstractArray{var\"#s4213\", L}}, Vector{<:Real}, ArraysOfArrays.ArrayOfSimilarArrays{var\"#s4211\", M, N, L, P} where {var\"#s4211\"<:Real, M, N, L, P<:AbstractArray{var\"#s4211\", L}}, StepRangeLen}} where T<:(Union{Unitful.Quantity{var\"#s4215\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s4215\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s4215\"<:Real, U})","page":"API","title":"LegendSpecFits.fit_sf_wl","text":"fit_sf_wl(dep_sep_data, a_grid_wl_sg, optimization_config)\n\nFit a A/E filter window length for the SEP data and return the optimal window length and the corresponding survival fraction.\n\nArguments\n\ndep_sep_data: NamedTuple with the DEP and SEP data\na_grid_wl_sg: range of window lengths to sweep through\noptimization_config: configuration dictionary\n\nReturns\n\nresult: optimal window length and corresponding survival fraction\nreport: report with all window lengths and survival fractions\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_aoe_compton-Tuple{StatsBase.Histogram, NamedTuple}","page":"API","title":"LegendSpecFits.fit_single_aoe_compton","text":"fit_single_aoe_compton(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background, :μ, :σ), NTuple{7, T}}; uncertainty::Bool=true) where T<:Real\n\nPerform a fit of the peakshape to the data in h using the initial values in ps while using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_aoe_compton_with_fixed_μ_and_σ-Tuple{StatsBase.Histogram, Number, Number, NamedTuple}","page":"API","title":"LegendSpecFits.fit_single_aoe_compton_with_fixed_μ_and_σ","text":"fit_single_aoe_compton_with_fixed_μ_and_σ(h::Histogram, μ::Number, σ::Number, ps::NamedTuple; uncertainty::Bool=true)\n\nFit a single A/E Compton band using the f_aoe_compton function consisting of a gaussian SSE peak and a step like background for MSE events using fixed values for μ and σ.\n\nReturns\n\n* `neg_log_likelihood`: The negative log-likelihood of the likelihood fit\n* `report`: Dict of NamedTuples of the fit report which can be plotted for each compton band\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_lq_compton-Tuple{StatsBase.Histogram, NamedTuple}","page":"API","title":"LegendSpecFits.fit_single_lq_compton","text":"fit_single_lq_compton(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background, :μ, :σ), NTuple{7, T}}; uncertainty::Bool=true) where T<:Real\n\nPerform a fit of the peakshape to the data in h using the initial values in ps while using the f_lq_compton function consisting of a gaussian SSE peak and a step like background for MSE events.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_peak_th228-Union{Tuple{T}, Tuple{StatsBase.Histogram, @NamedTuple{peak_pos::T, peak_fwhm::T, peak_sigma::T, peak_counts::T, bin_width::T, mean_background::T, mean_background_step::T, mean_background_std::T}}} where T<:Real","page":"API","title":"LegendSpecFits.fit_single_peak_th228","text":"fit_single_peak_th228(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background), NTuple{5, T}};, uncertainty::Bool=true, fixed_position::Bool=false, low_e_tail::Bool=true) where T<:Real\n\nPerform a fit of the peakshape to the data in h using the initial values in ps while using the gamma_peakshape with low-E tail. Also, FWHM is calculated from the fitted peakshape with MC error propagation. The peak position can be fixed to the value in ps by setting fixed_position=true. If the low-E tail should not be fitted, it can be disabled by setting low_e_tail=false.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_single_trunc_gauss-Union{Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}}, Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, @NamedTuple{low::T, high::T, max::T}}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.fit_single_trunc_gauss","text":"fit_single_trunc_gauss(x::Array, cuts::NamedTuple{(:low, :high, :max), Tuple{Float64, Float64, Float64}})\n\nFit a single truncated Gaussian to the data x between min_x and max_x. Returns report and resultwith:     *ffit: fitted function     *μ: mean of the Gaussian     *μerr: error of the mean     *σ: standard deviation of the Gaussian     *σ_err: error of the standard deviation     *n`: number of counts in the peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.fit_sipm_spectrum","page":"API","title":"LegendSpecFits.fit_sipm_spectrum","text":"fit_sipm_spectrum(pe_cal::Vector{<:Real}, min_pe::Real=0.5, max_pe::Real=3.5; \n    n_mixtures::Int=ceil(Int, (max_pe - min_pe) * 4), nIter::Int=50, nInit::Int=50, \n    method::Symbol=:kmeans, kind=:diag, Δpe_peak_assignment::Real=0.3, f_uncal::Function=identity, uncertainty::Bool=true)\n\nFit a Gaussian Mixture Model to the given pe calibration data and return the fit parameters.\n\nArguments\n\npe_cal::Vector{<:Real}: the pe calibration data\nmin_pe::Real=0.5: the minimum pe to consider\nmax_pe::Real=3.5: the maximum pe to consider\nn_mixtures::Int=ceil(Int, (max_pe - min_pe) * 4): the number of mixtures to fit\nnIter::Int=50: the number of iterations for the EM algorithm\nnInit::Int=50: the number of initializations for the EM algorithm\nmethod::Symbol=:kmeans: the method to use for initialization\nkind::Symbol=:diag: the kind of covariance matrix to use\nΔpe_peak_assignment::Real=0.3: the range to consider for peak assignment\nf_uncal::Function=identity: the function to use for uncalibration\nuncertainty::Bool=true: whether to calculate the uncertainty\n\nReturns\n\nresult: a tuple with the fit parameters\nreport: a tuple with the fit report which can be plotted via a recipe\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.fit_subpeaks_th228-Tuple{StatsBase.Histogram, StatsBase.Histogram, NamedTuple}","page":"API","title":"LegendSpecFits.fit_subpeaks_th228","text":"fit_single_peak_th228(h::Histogram, ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background), NTuple{5, T}};, uncertainty::Bool=true, fixed_position::Bool=false, low_e_tail::Bool=true) where T<:Real\n\nPerform a simultaneous fit of two peaks (h_survived and h_cut) that together would form a histogram h, from which the result h_result was already determined using fit_single_peak_th228. Also, FWHM is calculated from the fitted peakshape with MC error propagation. The peak position can be fixed to the value in ps by setting fixed_position=true. If the low-E tail should not be fitted, it can be disabled by setting low_e_tail=false.\n\nReturns\n\n* `result`: NamedTuple of the fit results containing values and errors, in particular the signal survival fraction `sf` and the background survival frachtion `bsf`.\n* `report`: NamedTuple of the fit report which can be plotted\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.gamma_peakshape-NTuple{8, Real}","page":"API","title":"LegendSpecFits.gamma_peakshape","text":"gamma_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    step_amplitude::Real, skew_fraction::Real, skew_width::Real,\n    background::Real;  \n    skew_fraction_highE::Real = 0.0, skew_width_highE::Real= 0.0, \n    background_kwargs... \n)\n\nStandard gamma peakshape: Describes the shape of a typical gamma peak in a detector. Components: \n\nGaussian signal peak with μ, σ, n - skew_fraction - skew_fraction_highE\nlow-energy tail: skew_fraction, skew_width\nhigh-energy tail: skew_fraction_highE, skew_width_highE (optional, default off)\nbackground:\nenergy-independent background\nstep-function scaled with step_amplitude from Compton scattered gammas\nlinear slope: background_slope (optional, default off)\nexponential decay: background_exp (optional, default off)\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.gauss_pdf-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.gauss_pdf","text":"LegendSpecFits.gauss_pdf(x::Real, μ::Real, σ::Real)\n\nEquivalent to pdf(Normal(μ, σ), x)\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.generate_aoe_compton_bands-Union{Tuple{T}, Tuple{Vector{<:Real}, Vector{<:T}, Vector{<:T}, T}} where T<:(Union{Unitful.Quantity{var\"#s2692\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s2692\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s2692\"<:Real, U})","page":"API","title":"LegendSpecFits.generate_aoe_compton_bands","text":"generate_aoe_compton_bands(aoe::Vector{<:Real}, e::Vector{<:T}, compton_bands::Vector{<:T}, compton_window::T) where T<:Unitful.Energy{<:Real}\n\nGenerate histograms for the A/E Compton bands and estimate peak parameters.  The compton bands are cutted out of the A/E spectrum and then binned using the Freedman-Diaconis Rule. For better performance the binning is only done in the area around the peak. The peak parameters are estimated using the estimate_single_peak_stats_psd function.\n\nReturns\n\n* `peakhists`: Array of histograms for each compton band\n* `peakstats`: StructArray of peak parameters for each compton band\n* `min_aoe`: Array of minimum A/E values for each compton band\n* `max_aoe`: Array of maximum A/E values for each compton band\n* `mean_peak_pos`: Mean peak position of all compton bands\n* `std_peak_pos`: Standard deviation of the peak position of all compton bands\n* `simple_pars_aoe_μ`: Simple curve fit parameters for the peak position energy depencence\n* `simple_pars_error_aoe_μ`: Simple curve fit parameter errors for the peak position energy depencence\n* `simple_pars_aoe_σ`: Simple curve fit parameters for the peak sigma energy depencence\n* `simple_pars_error_aoe_σ`: Simple curve fit parameter errors for the peak sigma energy depencence\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_centered_gaussian_window_cut-Union{Tuple{T}, Tuple{Vector{T}, T, T, Real}} where T<:Union{Real, Unitful.AbstractQuantity{<:Real}}","page":"API","title":"LegendSpecFits.get_centered_gaussian_window_cut","text":"get_centered_gaussian_window_cut(x::Array, min_x::Float64, max_x::Float64, n_σ::Real, center::Float64=0.0, n_bins_cut::Int=500, relative_cut::Float64=0.2, left::Bool=false)\n\nCut out a single peak from the array x between min_x and max_x by fitting a truncated one-sided Gaussian and extrapolating a window cut with n_σ standard deviations. The center and side of the fit can be specified with left and center variable.\n\nReturns\n\n* `low_cut`: lower edge of the cut peak\n* `high_cut`: upper edge of the cut peak\n* `center`: center of the peak\n* `σ`: standard deviation of the Gaussian\n* `low_cut_fit`: lower edge of the cut peak from the fit\n* `high_cut_fit`: upper edge of the cut peak from the fit\n* `err`: error of the fit parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_continuum_survival_fraction-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:T}, T, T, Union{Real, Unitful.AbstractQuantity{<:Real}}}} where T<:(Union{Unitful.Quantity{var\"#s516\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s516\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s516\"<:Real, U})","page":"API","title":"LegendSpecFits.get_continuum_survival_fraction","text":"get_continuum_survival_fraction(aoe::Vector{<:Unitful.RealOrRealQuantity}, e::Vector{<:T}, center::T, window::T, aoe_cut::Unitful.RealOrRealQuantity,; inverted_mode::Bool=false, sigma_high_sided::Unitful.RealOrRealQuantity=Inf*unit(first(aoe))) where T<:Unitful.Energy{<:Real}\n\nGet the survival fraction of a continuum after a AoE cut value aoe_cut for a given center and window size.\n\nReturns\n\ncenter: Center of the continuum\nwindow: Window size\nn_before: Number of counts before the cut\nn_after: Number of counts after the cut\nsf: Survival fraction\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_distribution_transform","page":"API","title":"LegendSpecFits.get_distribution_transform","text":"get_distribution_transform(d::Distribution, pprior::Prior)\n\nReturn a DistributionTransform for the given Distribution and Prior.\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.get_friedman_diaconis_bin_width","page":"API","title":"LegendSpecFits.get_friedman_diaconis_bin_width","text":"get_friedman_diaconis_bin_width(x::AbstractArray)\n\nReturn the bin width for the given data x using the Friedman-Diaconis rule.\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.get_low_aoe_cut-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:T}}} where T<:(Union{Unitful.Quantity{var\"#s385\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s385\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s385\"<:Real, U})","page":"API","title":"LegendSpecFits.get_low_aoe_cut","text":"get_low_aoe_cut(aoe::Vector{<:Unitful.RealOrRealQuantity}, e::Vector{<:T},; \n        dep::T=1592.53u\"keV\", window::Vector{<:T}=[12.0, 10.0]u\"keV\", dep_sf::Float64=0.9, rtol::Float64=0.001, maxiters::Int=300, sigma_high_sided::Float64=Inf,\n        cut_search_interval::Tuple{<:Unitful.RealOrRealQuantity, <:Unitful.RealOrRealQuantity}=(-25.0*unit(first(aoe)), 1.0*unit(first(aoe))), \n        bin_width_window::T=3.0u\"keV\", max_e_plot::T=3000.0u\"keV\",  plot_window::Vector{<:T}=[12.0, 50.0]u\"keV\",\n        fixed_position::Bool=true, fit_func::Symbol=:gamma_def, uncertainty::Bool=true) where T<:Unitful.Energy{<:Real}\n\nGet the AoE cut value for a given dep and window size while performing a peak fit with fixed position. The AoE cut value is determined by finding the cut value for which the number of counts after the cut is equal to dep_sf times the number of counts before the cut. The algorhithm utilizes a root search algorithm to find the cut value with a relative tolerance of rtol.\n\nReturns\n\ncut: AoE cut value\nn0: Number of counts before the cut\nnsf: Number of counts after the cut\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_mc_value_shapes-Tuple{NamedTuple, NamedTuple, Integer}","page":"API","title":"LegendSpecFits.get_mc_value_shapes","text":"get_mc_value_shapes(v::NamedTuple, v_err::NamedTuple, n::Integer)\n\nReturn a NamedTuple with the same fields as v and v_err but with Normal distributions for each field.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_mc_value_shapes-Union{Tuple{T}, Tuple{V}, Tuple{V, Matrix{T}, Integer}} where {V<:NamedTuple, T<:AbstractFloat}","page":"API","title":"LegendSpecFits.get_mc_value_shapes","text":"get_mc_value_shapes(v::NamedTuple, v_err::Matrix, n::Integer)\n\nGenerate n random samples of fit parameters using their respective best-fit values v and covariance matrix v_err\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_number_of_bins-Tuple{AbstractArray}","page":"API","title":"LegendSpecFits.get_number_of_bins","text":"get_number_of_bins(x::AbstractArray,; method::Symbol=:sqrt)\n\nReturn the number of bins for the given data x using the given method.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_peak_fwhm_th228","page":"API","title":"LegendSpecFits.get_peak_fwhm_th228","text":"get_peak_fwhm_th228(v_ml::NamedTuple, v_ml_err::NamedTuple)\n\nGet the FWHM of a peak from the fit parameters while performing a MC error propagation.\n\nReturns\n\n* `fwhm`: the FWHM of the peak\n* `fwhm_err`: the uncertainty of the FWHM of the peak\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.get_peak_survival_fraction-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:T}, T, Vector{T}, Union{Real, Unitful.AbstractQuantity{<:Real}}}} where T<:(Union{Unitful.Quantity{var\"#s414\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s414\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s414\"<:Real, U})","page":"API","title":"LegendSpecFits.get_peak_survival_fraction","text":"get_peak_survival_fraction(aoe::Vector{<:Unitful.RealOrRealQuantity}, e::Vector{<:T}, peak::T, window::Vector{T}, aoe_cut::Unitful.RealOrRealQuantity,; \nuncertainty::Bool=true, inverted_mode::Bool=false, bin_width_window::T=2.0u\"keV\", sigma_high_sided::Unitful.RealOrRealQuantity=Inf*unit(first(aoe)), fit_func::Symbol=:gamma_def) where T<:Unitful.Energy{<:Real}\n\nGet the survival fraction of a peak after a AoE cut value aoe_cut for a given peak and window size while performing a peak fit with fixed position.\n\nReturns\n\npeak: Peak position\nn_before: Number of counts before the cut\nn_after: Number of counts after the cut\nsf: Survival fraction\nerr: Uncertainties\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_peakhists_th228-Tuple{Vector{<:Union{Unitful.Quantity{var\"#s240\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s240\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s240\"<:Real, U}}, Vector{<:Union{Unitful.Quantity{var\"#s199\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s199\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s199\"<:Real, U}}, Vector{<:Tuple{Union{Unitful.Quantity{var\"#s197\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s197\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s197\"<:Real, U}, Union{Unitful.Quantity{var\"#s27\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s27\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s27\"<:Real, U}}}}","page":"API","title":"LegendSpecFits.get_peakhists_th228","text":"get_peakhists_th228(e::Array, th228_lines::Array, window_sizes::Array, e_unit::String=\"keV\", proxy_binning_peak::Float64=2103.5, proxy_binning_peak_window::Float64=10.0)\n\nCreate histograms around the calibration lines and return the histograms and the peak statistics.\n\nReturns\n\n* `peakhists`: array of histograms around the calibration lines\n* `peakstats`: array of statistics for the calibration line fits\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_peaks_survival_fractions-Union{Tuple{T}, Tuple{Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:T}, Vector{<:T}, Vector{Symbol}, Vector{<:Tuple{T, T}}, Union{Real, Unitful.AbstractQuantity{<:Real}}}} where T<:(Union{Unitful.Quantity{var\"#s386\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s386\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s386\"<:Real, U})","page":"API","title":"LegendSpecFits.get_peaks_survival_fractions","text":"get_peaks_survival_fractions(aoe::Vector{<:Unitful.RealOrRealQuantity}, e::Vector{<:T}, peaks::Vector{<:T}, peak_names::Vector{Symbol}, windows::Vector{<:Tuple{T, T}}, aoe_cut::Unitful.RealOrRealQuantity,; uncertainty::Bool=true, inverted_mode::Bool=false, bin_width_window::T=2.0u\"keV\", sigma_high_sided::Unitful.RealOrRealQuantity=Inf*unit(first(aoe)), fit_funcs::Vector{Symbol}=fill(:gamma_def, length(peaks))) where T<:Unitful.Energy{<:Real}\n\nGet the survival fraction of a peak after a AoE cut value aoe_cut for a given peak and window size while performing a peak fit with fixed position.\n\nReturn\n\nresult: Dict of results for each peak\nreport: Dict of reports for each peak\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_residuals-Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}, Union{NamedTuple, AbstractVector}}","page":"API","title":"LegendSpecFits.get_residuals","text":"residuals(f_fit::Base.Callable, h::Histogram{<:Real,1},v_ml::Union{NamedTuple, AbstractVector})\n\nCalculate bin-wise residuals and normalized residuals.  Calcualte bin-wise p-value based on poisson distribution for each bin.\n\nInput:\n\nf_fitfunction handle of fit function (peakshape)\nh histogram of data\nv_ml best-fit parameters\n\nReturns:\n\nresiduals difference: model - data (histogram bin count)\nresiduals_norm normalized residuals: model - data / sqrt(model)\np_value_binwise p-value for each bin based on poisson distribution\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_sf_after_aoe_cut-Union{Tuple{T}, Tuple{Union{Real, Unitful.AbstractQuantity{<:Real}}, Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:T}, T, Vector{T}, T, NamedTuple}} where T<:(Union{Unitful.Quantity{var\"#s516\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s516\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s516\"<:Real, U})","page":"API","title":"LegendSpecFits.get_sf_after_aoe_cut","text":"get_sf_after_aoe_cut(aoe_cut::Unitful.RealOrRealQuantity, aoe::Vector{<:Unitful.RealOrRealQuantity}, e::Vector{<:T}, peak::T, window::Vector{T}, bin_width::T, result_before::NamedTuple; uncertainty::Bool=true, fit_func::Symbol=:gamma_def) where T<:Unitful.Energy{<:Real}\n\nGet the survival fraction after a AoE cut value aoe_cut for a given peak and window size from a combined fit to the survived and cut histograms.\n\nReturns\n\nsf: Survival fraction after the cut\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.get_th228_fit_functions-Tuple{}","page":"API","title":"LegendSpecFits.get_th228_fit_functions","text":"get_th228_fit_functions(; background_center::Union{Real,Nothing} = nothing)\n\nThis function defines the gamma peakshape fit functions used in the calibration specfits.\n\ngamma_def: \"default\" gamma peakshape with gaussian signal, low-energy tail, and background (flat + step)\ngamma_tails: default gamma peakshape + high-energy tail\ngamma_bckSlope: default gamma peakshape + linear background slope\ngamma_bckExp: default gamma peakshape + exponential background \ngamma_bckFlat: default gamma peakshape - step background (only flat component!)\ngammatailsbckFlat: default gamma peakshape + high-energy tail - step background (only flat component!)\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.highEtail_peakshape-NTuple{6, Real}","page":"API","title":"LegendSpecFits.highEtail_peakshape","text":"highEtail_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real, skew_width::Real,\n)\n\nDescribes the high-E signal tail part of the shape \n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.hist_loglike-Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}}","page":"API","title":"LegendSpecFits.hist_loglike","text":"hist_loglike(f_fit::Base.Callable, h::Histogram{<:Real,1})\n\nCalculate the Poisson log-likelihood of a fit function f_fit(x) and a histogram h. f_fit must accept all values x on the horizontal axis of the histogram.\n\nCurrently uses a simple midpoint-rule integration of f_fit over the bins of h.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.linear_function-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.linear_function","text":"linear_function(x::Real, slope::Real, intercept::Real)\n\nEvaluates a linear function at x with parameters slope and intercept.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.lowEtail_peakshape-NTuple{6, Real}","page":"API","title":"LegendSpecFits.lowEtail_peakshape","text":"lowEtail_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real, skew_width::Real,\n)\n\nDescribes the low-E signal tail part of the shape of a typical gamma peak in a detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.lq_drift_time_correction-Tuple{Vector{<:AbstractFloat}, Vector{<:Union{Real, Unitful.AbstractQuantity{<:Real}}}, Vector{<:Union{Unitful.Quantity{var\"#s4225\", 𝐋^2 𝐌 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{var\"#s4225\", 𝐋^2 𝐌 𝐓^-2, U}} where {L, S}} where {var\"#s4225\"<:Real, U}}, Unitful.AbstractQuantity, Unitful.AbstractQuantity}","page":"API","title":"LegendSpecFits.lq_drift_time_correction","text":"lq_norm::Vector{Float64}, dt_eff::Vector{<:Unitful.RealOrRealQuantity}, e_cal::Vector{<:Unitful.Energy{<:Real}}, DEP_µ::Unitful.AbstractQuantity, DEP_σ::Unitful.AbstractQuantity; \nDEP_edgesigma::Float64=3.0 , mode::Symbol=:percentile, drift_cutoff_sigma::Float64 = 2.0, prehist_sigma::Float64=2.5, e_expression::Union{String,Symbol}=\"e\", dt_eff_low_quantile::Float64=0.15, dt_eff_high_quantile::Float64=0.95)\n\nPerform the drift time correction on the LQ data using the DEP peak. The function cuts outliers in lq and drift time, then performs a linear fit on the remaining data. The data is Corrected by subtracting the linear fit from the lq data.\n\nReturns\n\n* `result`: NamedTuple of the function used for lq classifier construction\n* `report`: NamedTuple of the histograms used for the fit, the cutoff values and the DEP edges\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.nearestSPD-Tuple{Matrix{<:Real}}","page":"API","title":"LegendSpecFits.nearestSPD","text":"nearestSPD(A::Matrix{<:Real})\n\nReturns the nearest positive definite matrix to A Calculation is based on matrix factorization techniques described in https://www.sciencedirect.com/science/article/pii/0024379588902236\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.p_value-Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}, Union{NamedTuple, AbstractVector}}","page":"API","title":"LegendSpecFits.p_value","text":"p_value(f_fit::Base.Callable, h::Histogram{<:Real,1},v_ml::Union{NamedTuple, AbstractVector})\n\ncalculate p-value based on least-squares, assuming gaussian uncertainty baseline method to get goodness-of-fit (gof)\n\ninput:\n\nf_fitfunction handle of fit function (peakshape)\nh histogram of data\nv_ml best-fit parameters\n\nreturns:\n\npval p-value of chi2 test\nchi2 chi2 value\ndof degrees of freedom\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.p_value_MC-Union{Tuple{T}, Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}, @NamedTuple{peak_pos::T, peak_fwhm::T, peak_sigma::T, peak_counts::T, mean_background::T, mean_background_step::T, mean_background_std::T}, NamedTuple}} where T<:Real","page":"API","title":"LegendSpecFits.p_value_MC","text":"p_value_MC(f_fit::Base.Callable, h::Histogram{<:Real,1},ps::NamedTuple{(:peak_pos, :peak_fwhm, :peak_sigma, :peak_counts, :mean_background)},v_ml::NamedTuple,;n_samples::Int64=1000)\n\nalternative p-value calculation via Monte Carlo sampling. Warning: computational more expensive than pvaule() and pvalue_LogLikeRatio()\n\nInput:\n\nf_fitfunction handle of fit function (peakshape)\nh histogram of data\nps best-fit parameters\nv_ml best-fit parameters\nn_samples number of samples\n\nPerformed Steps:\n\nCreate n_samples randomized histograms. For each bin, samples are drawn from a Poisson distribution with λ = model peak shape (best-fit parameter)\nEach sample histogram is fit using the model function f_fit\nFor each sample fit, the max. loglikelihood fit is calculated \n\nReturns\n\n% p value –> comparison of sample max. loglikelihood and max. loglikelihood of best-fit\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.p_value_poissonll-Tuple{Union{Function, Type}, StatsBase.Histogram{<:Real, 1}, Union{NamedTuple, AbstractVector}}","page":"API","title":"LegendSpecFits.p_value_poissonll","text":"p_value_poissonll(f_fit::Base.Callable, h::Histogram{<:Real,1},v_ml::Union{NamedTuple, AbstractVector})\n\np-value via poisson likelihood ratio: baseline for ML fits using Poisson statistics and bins with low number of counts\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.peak_centroid-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.peak_centroid","text":"peak_centroid(v::NamedTuple)\n\ncalculate centroid of gamma peak from fit parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.peakshape_components-Tuple{Symbol}","page":"API","title":"LegendSpecFits.peakshape_components","text":"peakshape_components(fit_func::Symbol; background_center::Real)\n\nThis function defines the components (signal, low/high-energy tail, backgrounds) of the fit function used in gamma specfits.  These component functions are used in the fit-report and in plot receipes \n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.prepare_sep_peakhist-Union{Tuple{Vector{<:T}}, Tuple{T}} where T<:Real","page":"API","title":"LegendSpecFits.prepare_sep_peakhist","text":"prepare_sep_peakhist(e::Array{T}, dep::T,; relative_cut::T=0.5, n_bins_cut::Int=500) where T<:Real\n\nPrepare an array of uncalibrated SEP energies for parameter extraction and calibration.\n\nReturns\n\nresult: Result of the initial fit\nreport: Report of the initial fit\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.pulser_cal_qc-Union{Tuple{Q}, Tuple{Q, PropDicts.PropDict}} where Q<:TypedTables.Table","page":"API","title":"LegendSpecFits.pulser_cal_qc","text":"pulser_cal_qc(data, pulser_config; n_pulser_identified=100)\n\nPerform simple QC cuts on the data and return the data for energy calibration.\n\nReturns\n\n- pulser_idx: indices of the pulser events\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.set_memlimit-Tuple{Float64}","page":"API","title":"LegendSpecFits.set_memlimit","text":"set_memlimit(gig::Float64)\nSet memory limit in GB for the whole current process ignoring if things could run in parallel\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.set_timelimit-Tuple{Float64}","page":"API","title":"LegendSpecFits.set_timelimit","text":"set_timelimit(sec::Float64)\nSet time limit in seconds a single Optim.jl optimization step\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.signal_peakshape-NTuple{5, Real}","page":"API","title":"LegendSpecFits.signal_peakshape","text":"signal_peakshape(\n    x::Real, μ::Real, σ::Real, n::Real,\n    skew_fraction::Real;  skew_fraction_highE::Real = 0.0\n)\n\nDescribes the signal part of the shape of a typical gamma peak in a detector.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.simple_calibration","page":"API","title":"LegendSpecFits.simple_calibration","text":"simple_calibration(e_uncal::Array, th228_lines::Array, window_size::Float64=25.0, n_bins::Int=15000, calib_type::String=\"th228\")\n\nPerform a simple calibration for the uncalibrated energy array e_uncal  using the calibration type calib_type and the calibration lines th228_lines.  The window size is the size of the window around the calibration line to use for the calibration.  The number of bins is the number of bins to use for the histogram.\n\nReturns      * h_calsimple: histogram of the calibrated energy array     * h_uncal: histogram of the uncalibrated energy array     * c: calibration factor     * fep_guess: estimated full energy peak (FEP)     * peakhists: array of histograms around the calibration lines     * peakstats: array of statistics for the calibration line fits\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.sipm_simple_calibration","page":"API","title":"LegendSpecFits.sipm_simple_calibration","text":"sipm_simple_calibration(pe_uncal::Array)\n\nPerform a simple calibration for the uncalibrated p.e. spectrum array pe_uncal using just the 1 p.e. and 2 p.e. peak positions estimated by a peakfinder.\n\nInputs:     * pe_uncal: array of uncalibrated peak amplitudes kwargs:     * initial_min_amp: uncalibrated amplitude value as a left boundary to build the uncalibrated histogram where the peak search is performed on.                         For the peak search with noise peak, this value is consecutively increased i.o.t exclude the noise peak from the histogram.     * initial_max_quantile: quantile of the uncalibrated amplitude array to used as right boundary to build the uncalibrated histogram     * peakfinder_σ: sigma value in number of bins for peakfinder     * peakfinder_threshold: threshold value for peakfinder\n\nReturns      * pe_simple_cal: array of the calibrated pe array with the simple calibration     * func: function to use for the calibration (pe_simple_cal = pe_uncal .* c .+ offset)     * c: calibration factor     * offset: calibration offset      * peakpos: 1 p.e. and 2 p.e. peak positions in uncalibrated amplitude     * peakpos_cal: 1 p.e. and 2 p.e. peak positions in calibrated amplitude     * h_uncal: histogram of the uncalibrated pe array     * h_calsimple: histogram of the calibrated pe array with the simple calibration\n\n\n\n\n\n","category":"function"},{"location":"api/#LegendSpecFits.step_gauss-Tuple{Real, Real, Real}","page":"API","title":"LegendSpecFits.step_gauss","text":"step_gauss(x::Real, μ::Real, σ::Real)\n\nEvaluates the convulution of a Heaviside step function and the PDF of Normal(μ, σ) at x.\n\nThe result does not correspond to a PDF as it is not normalizable.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.subhist-Tuple{StatsBase.Histogram{<:Any, 1}, Tuple{Real, Real}}","page":"API","title":"LegendSpecFits.subhist","text":"subhist(h::Histogram, r::Tuple{<:Real,<:Real})\n\nReturn a new Histogram with the bins in the range r.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.tuple_to_array-Tuple{NamedTuple}","page":"API","title":"LegendSpecFits.tuple_to_array","text":"tuple_to_array(nt::NamedTuple, fields::Vector{Symbol})\n\nReturn an array with the values of the fields in nt in the order given by fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#LegendSpecFits.weibull_from_mx","page":"API","title":"LegendSpecFits.weibull_from_mx","text":"weibull_from_mx(m::Real, x::Real, p_x::Real = 0.6827)::Weibull\n\nConstruct a Weibull distribution with a given median m and a given p_x-quantile x.\n\nUseful to construct priors for positive quantities.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#LegendSpecFits.jl","page":"Home","title":"LegendSpecFits.jl","text":"","category":"section"}]
}
